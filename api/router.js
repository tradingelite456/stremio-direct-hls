// === Catalogue d'exemple (Ã  personnaliser) ===
const catalogData = [
  
  {
    id: "directhls_f1",
    type: "movie",
    name: "F1 (Le Film)",
    poster: "https://fr.web.img3.acsta.net/r_1920_1080/img/b1/78/b178318cb7be01b706863ca6c40a5d89.jpg",
    description: "Sonny Hayes Ã©tait le prodige de la F1 des annÃ©es 90 jusquâ€™Ã  son terrible accident. Trente ans plus tard, devenu un pilote indÃ©pendant, il est contactÃ© par Ruben Cervantes, patron dâ€™une Ã©curie en faillite qui le convainc de revenir pour sauver lâ€™Ã©quipe et prouver quâ€™il est toujours le meilleur. Aux cÃ´tÃ©s de Joshua Pearce, diamant brut prÃªt Ã  devenir le numÃ©ro 1, Sonny rÃ©alise vite qu'en F1, son coÃ©quipier est aussi son plus grand rival, que le danger est partout et qu'il risque de tout perdre.",
    stream: "https://pulse.topstrime.online/movie/911430/xjycgu/master.m3u8"
  },

   {
    id: "directhls_nobody",
    type: "movie",
    name: "Nobody2",
    poster: "https://fr.web.img5.acsta.net/c_310_420/img/76/36/763625198f65137a7feb27001ca50278.jpg",
    description: "AprÃ¨s avoir dÃ©cidÃ© d'emmener sa famille dans une ville touristique pour s'amuser au soleil, une rencontre sans gravitÃ© avec des brutes locales prÃ©cipite la famille dans la ligne de mire d'un chef du crime dÃ©rangÃ© et assoiffÃ© de sang, dÃ©terminÃ© Ã  perturber sa dÃ©tente.",
    stream: "https://pulse.topstrime.online/movie/1007734/m7ae63/master.m3u8"
  },
  {
    id: "directhls_yufpsm",
    type: "movie",
    name: "Y a-t-il un flic pour sauver le monde ?",
    poster: "https://fr.web.img6.acsta.net/c_310_420/img/fb/58/fb582203041242b6b13cf2a05660ffb6.jpg",
    description: "Un seul homme possÃ¨de des compÃ©tencesâ€¦ disons uniquesâ€¦ pour diriger la prestigieuse Brigade SpÃ©ciale etâ€¦ sauver le monde, tout simplement ! Cet homme, câ€™est le lieutenant Frank Drebin Jr. â€” oui, vous avez bien lu â€” qui suit les traces de son illustre pÃ¨re, l'inspecteur Frank Drebin, qui sâ€™Ã©tait dÃ©jÃ  illustrÃ© par le passÃ© pour sauver la Reine, le PrÃ©sident et Hollywood !",
    stream: "https://pulse.topstrime.online/movie/1035259/bf8xpe/master.m3u8"
  },

  {
    id: "directhls_murder",
    type: "movie",
    name: "Le Murder Club du jeudi",
    poster: "https://fr.web.img4.acsta.net/c_310_420/img/71/cf/71cfda9b6e17b1b060ca232f1a038ea1.jpg",
    description: "Quatre retraitÃ©s irrÃ©sistibles qui passent leur temps libre Ã  enquÃªter sur des affaires de meurtre non rÃ©solues juste pour le plaisir. Mais quand une mort inexpliquÃ©e survient dans le voisinage, les fins limiers aux mÃ©thodes originales ont une intrigue criminelle toute fraÃ®che Ã  rÃ©soudre, et l'enquÃªte prend une tournure palpitante.",
    stream: "https://pulse.topstrime.online/movie/744653/m96tzk/master.m3u8"
  },
  {
    id: "directhls_ira",
    type: "movie",
    name: "On ira",
    poster: "https://fr.web.img5.acsta.net/r_1920_1080/img/4e/64/4e644edc4b90cae39ea31727a29cdb09.jpg",
    description: "Marie, 80 ans, en a ras le bol de sa maladie. Elle a un plan : partir en Suisse pour mettre fin Ã  ses jours. Mais au moment de lâ€™annoncer Ã  Bruno, son fils irresponsable, et Anna sa petite-fille en crise dâ€™ado, elle panique et invente un Ã©norme mensonge. PrÃ©textant un mystÃ©rieux hÃ©ritage Ã  aller chercher dans une banque suisse, elle leur propose de faire un voyage tous ensemble. Complice involontaire de cette mascarade, Rudy, un aide-soignant tout juste rencontrÃ© la veille, va prendre le volant du vieux camping car familial, et conduire cette famille dans un voyage inattendu.",
    stream: "https://pulse.topstrime.online/movie/1003504/i09w9p/master.m3u8"
  },

  // === SÃ‰RIES ===
 {
  id: "series_squid",
  type: "series",
  name: "Squid Game",
  poster: "https://fr.web.img6.acsta.net/r_1920_1080/img/2a/95/2a957aa348ff7469cc49c2f92952067f.jpg",
  description: "TentÃ©s par un prix allÃ©chant en cas de victoire, des centaines de joueurs dÃ©sargentÃ©s acceptent de s'affronter lors de jeux pour enfants aux enjeux mortels.",
  seasons: [
    {
      season: 1,
      episodes: [
        {
          episode: 1,
          title: "Saison 1 Ã‰pisode 1",
          url: "https://pulse.topstrime.online/tv/93405/t93qr2/S1/E1/master.m3u8"
        },
        {
          episode: 2,
          title: "Saison 1 Ã‰pisode 2",
          url: "https://pulse.topstrime.online/tv/93405/yvrujh/S1/E2/master.m3u8"
        }
      ]
    },
    {
      season: 2,
      episodes: [
        {
          episode: 1,
          title: "Saison 2 Ã‰pisode 1",
          url: "https://pulse.topstrime.online/tv/93405/r6pkqv/S2/E1/master.m3u8"
        }
      ]
    }
  ]
}
];


// === Helpers ===
function sendJSON(res, obj, status = 200) {
  res.setHeader("Content-Type", "application/json");
  res.setHeader("Cache-Control", "public, max-age=3600");
  res.statusCode = status;
  res.end(JSON.stringify(obj));
}

function stripJson(s) {
  return s.replace(/\.json$/, "");
}

// === Router principal ===
module.exports = (req, res) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");
  if (req.method === "OPTIONS") {
    res.statusCode = 200;
    return res.end();
  }

  const url = new URL(req.url, "http://localhost");
  const path = url.pathname.replace(/^\/api/, "");
  const parts = path.split("/").filter(Boolean);

  if (!parts.length) return sendJSON(res, { err: "No route" }, 404);

  const [resource] = parts;

  // === CATALOG ===
  if (resource === "catalog") {
    const type = parts[1];
    const catalogId = stripJson(parts[2] || "");

    let metas = [];

    if (type === "movie" && catalogId === "direct_hls") {
      metas = catalogData
        .filter(x => x.type === "movie")
        .map(({ id, name, poster, type, description }) => ({
          id,
          type: type || "movie",
          name,
          poster,
          description
        }));
    }

    if (type === "series" && catalogId === "direct_hls") {
      metas = catalogData
        .filter(x => x.type === "series")
        .map(({ id, name, poster, background, type, description, seasons }) => ({
          id,
          type: type || "series",
          name,
          poster,
          background,
          description,
          seasons: seasons.map(s => ({ season: s.season })) // ne renvoie que la liste des saisons
        }));
    }

    return sendJSON(res, { metas });
  }

  // === META ===
if (resource === "meta") {
    const id = stripJson(parts[2] || "");
    const item = catalogData.find(x => x.id === id);
    if (!item) return sendJSON(res, { err: "Not found" }, 404);

    const meta = {
      id: item.id,
      type: item.type || "movie",
      name: item.name,
      poster: item.poster,
      background: item.background || undefined,
      description: item.description,
      // ðŸ‘‡ pour les sÃ©ries : Stremio attend la liste des saisons ici
      seasons: item.type === "series" ? item.seasons.map(s => ({ season: s.season })) : undefined
    };

    return sendJSON(res, { meta });
}


  // === STREAM ===
  if (resource === "stream") {
    const id = stripJson(parts[2] || "");
    const item = catalogData.find(x => x.id === id);
    if (!item) return sendJSON(res, { streams: [] });

    let streams = [];

    if (item.type === "movie") {
      streams = [
        {
          title: "Direct HLS",
          url: item.stream
        }
      ];
    } else if (item.type === "series") {
      const seasonParam = url.searchParams.get("season"); // ?season=1
      const seasonNumber = seasonParam ? parseInt(seasonParam) : 1;

      const seasonData = item.seasons.find(s => s.season === seasonNumber) || { episodes: [] };

      streams = seasonData.episodes.map(ep => ({
        title: ep.title,
        season: seasonNumber,
        episode: ep.episode,
        url: ep.url
      }));
    }

    return sendJSON(res, { streams });
  }

  return sendJSON(res, { err: "Unknown route" }, 404);
};
